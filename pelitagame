#!/usr/bin/env python

import sys
import os.path
import random
import string
import keyword
import logging
import subprocess
import time

# silence stupid warnings from logging module
logging.root.manager.emittedNoHandlerWarning = 1

try:
    import argparse
except ImportError:
    from pelita.compat import argparse

import pelita

def check_module(filepath):
    "Throws an ValueError is the specified path is neither a module nor a package."
    if not os.path.exists(filepath):
        raise ValueError("'%s' doesn't exist" % filepath)
    allowed = string.letters + string.digits + '_'
    if filepath.endswith('.py'):
        valid = os.path.isfile(filepath)
        modname = os.path.basename(filepath[:-3])
    else:
        initpy = os.path.join(filepath, '__init__.py')
        valid = os.path.isdir(filepath) and os.path.isfile(initpy)
        modname = os.path.basename(filepath.rstrip(os.path.sep))
    if (set(modname) - set(allowed) or
        modname[0] in string.digits or
        modname in keyword.kwlist or
        modname.startswith('__')):
        raise ValueError("invalid module name: '%s'" % modname)

    if not valid:
        raise ValueError("'%s': neither a module nor a package" % filepath )

def load_factory(filespec):
    filename, _, factory_name = filespec.partition(':')
    check_module(filename)
    filename = filename.rstrip(os.path.sep)
    dirname = os.path.dirname(filename)
    modname = os.path.splitext(os.path.basename(filename))[0]

    factory_name = factory_name or 'factory'
    with pelita.utils.with_sys_path(dirname):
        module = __import__(modname, fromlist=[factory_name])
    return getattr(module, factory_name)

PLAYERS = pelita.player.SANE_PLAYERS

def import_builtin_player(name):
    if name == 'random':
        name = random.choice(PLAYERS)
        print 'Choosing %s for random player' % name
    try:
        player = getattr(pelita.player, name)
    except AttributeError:
        others = ', '.join(PLAYERS)
        msg = 'Failed to find %s in pelita.player [%s]' % (name, others)
        raise ImportError(msg)
    return player

def create_builtin_team(spec):
    names = spec.split(',')
    if len(names) == 1:
        names *= 2
    elif len(names) > 2:
        raise ValueError('need two comma separated names')

    players = [import_builtin_player(name)() for name in names]
    teamname = 'The %ss' % players[0].__class__.__name__
    return pelita.player.SimpleTeam(teamname, *players)

def load_team(spec):
    try:
        if '/' in spec or spec.endswith('.py') or os.path.exists(spec):
            team = load_factory(spec)()
        else:
            team = create_builtin_team(spec)
        return team
    except (ValueError, AttributeError, IOError, ImportError) as e:
        print >>sys.stderr, "failure while loading team '%s'" % spec
        print >>sys.stderr, 'ERROR: %s' % e
        raise

def prepare_team(team_spec, standalone=False):
    # check if we've been given an address which a remote
    # player wants to connect to
    if standalone:
        addrs = "tcp://*"
        team = None
    else:
        if "://" in team_spec:
            addrs = team_spec
            team = None
        else:
            addrs = "tcp://*"
            team = load_team(team_spec) or sys.exit(1)
    return addrs, team, team_spec


def start_logging(filename):
    hdlr = logging.FileHandler(filename, mode='w')
    logger = logging.getLogger('pelita')
    FORMAT = \
    '[%(relativeCreated)06d %(name)s:%(levelname).1s][%(funcName)s] %(message)s'
    formatter = logging.Formatter(FORMAT)
    hdlr.setFormatter(formatter)
    logger.addHandler(hdlr)
    logger.setLevel(logging.DEBUG)


def geometry_string(s):
    """Get a X-style geometry definition and return a tuple.

    600x400 -> (600,400)
    """
    try:
        x_string, y_string = s.split('x')
        geometry = (int(x_string), int(y_string))
    except ValueError:
        msg = "%s is not a valid geometry specification" %s
        raise argparse.ArgumentTypeError(msg)
    return geometry

def get_python_process():
    py_proc = sys.executable
    if not py_proc:
        raise RuntimeError("Cannot retrieve current Python executable.")
    return py_proc

parser = argparse.ArgumentParser(description='Run a single pelita game',
                                 add_help=False,
                                 formatter_class=argparse.RawDescriptionHelpFormatter)
prog = parser.prog
parser._positionals = parser.add_argument_group('Arguments')
parser.add_argument('left_team', help='team on the left side', nargs='?',
                    default="random")
parser.add_argument('right_team', help='team on the right side', nargs='?',
                    default="random")

parser._optionals = parser.add_argument_group('Options')
parser.add_argument('--help', '-h', help='show this help message and exit',
                    action='store_const', const=True)
parser.add_argument('--log', help='print debugging log information to'
                                  ' LOGFILE (default \'pelita.log\')',
                    metavar='LOGFILE', default=argparse.SUPPRESS, nargs='?')
parser.add_argument('--dump', help='print game dumps to'
                                  ' DUMPFILE (default \'pelita.dump\')',
                    metavar='DUMPFILE', default=argparse.SUPPRESS, nargs='?')
parser.add_argument('--rounds', type=int, default=300,
                    help='maximum number of rounds to play')
parser.add_argument('--seed', type=int, metavar='SEED', default=None, 
                    help='fix random seed')
parser.add_argument('--geometry', type=geometry_string, metavar='NxM',
                    help='initial size of the game window')
parser.add_argument('--dry-run', const=True, action='store_const',
                    help='load players but do not actually play the game')
parser.add_argument('--max-timeouts', type=int, default=5,
                    dest='max_timeouts', help='maximum number of timeouts allowed')

timeout_opt = parser.add_mutually_exclusive_group()
timeout_opt.add_argument('--timeout', type=float, metavar="SEC",
                         dest='timeout_length', help='time before timeout is triggered')
timeout_opt.add_argument('--no-timeout', const=None, action='store_const',
                         dest='timeout_length', help='run game with no timeouts')
parser.set_defaults(timeout_length=3)

publisher_opt = parser.add_mutually_exclusive_group()
publisher_opt.add_argument('--publish', type=str, metavar='URL',
                           dest='publish_to', help='publish to this zmq socket')
publisher_opt.add_argument('--no-publish', const=False, action='store_const',
                           dest='publish_to', help='do not publish')
parser.set_defaults(publish_to="tcp://*:50011")

controller_opt = parser.add_mutually_exclusive_group()
controller_opt.add_argument('--controller', type=str, metavar='URL', default="tcp://*:50012",
                            help='open a controller on this zmq socket')

viewer_opt = parser.add_mutually_exclusive_group()
viewer_opt.add_argument('--ascii', action='store_const', const='ascii',
                        dest='viewer', help='use the ASCII viewer')
viewer_opt.add_argument('--null', action='store_const', const='null',
                        dest='viewer', help='use the /dev/null viewer')
viewer_opt.add_argument('--progress', action='store_const', const='progress',
                        dest='viewer', help='use the progress viewer')
viewer_opt.add_argument('--tk', action='store_const', const='tk',
                        dest='viewer', help='use the tk viewer (default)')
viewer_opt.add_argument('--tk-no-sync', action='store_const', const='tk-no-sync',
                        dest='viewer', help='use the unsynchronised tk viewer')
parser.set_defaults(viewer='tk')

layout_opt = parser.add_mutually_exclusive_group()
layout_opt.add_argument('--layoutfile', metavar='FILE',
                        help='load a maze layout from FILE')
layout_opt.add_argument('--layout', metavar='NAME',
                        help="load a maze layout by name. If NAME is"
                        " 'list' return a list of available names")
layout_opt.add_argument('--filter', metavar='STRING',
                        default='normal_without_dead_ends',
                        help='retrict the pool of random layouts to those whose'
                        ' name contains STRING.'
                        ' Default: \'normal_without_dead_ends\'')

parser.add_argument('--standalone-client', const=True, action='store_const', dest='standalone_client',
                    help='run standalone game')
parser.add_argument('--standalone-left', const=True, action='store_const', dest='standalone_left',
                    help='run standalone game for the left team')
parser.add_argument('--standalone-right', const=True, action='store_const', dest='standalone_right',
                    help='run standalone game for the right team')

parser.epilog = """\
Team Specification:
  - Using predefined players:
    A single name (e.g. 'NQRandomPlayer') in which case the team is
    composed of players of this type, or a comma separated list of
    player types (e.g. 'BFSPlayer,BasicDefensePlayer'). Example usage:

        $ %(prog)s BFSPlayer,RandomPlayer NQRandomPlayer,BasicDefensePlayer

    Use 'list' as a team to get a list of predefined players.

  - Using custom players (filename):
    The name of a python file (e.g. '~/my_player.py') which defines
    a function named 'factory' (you can change the name of the factory
    function by adding ':my_factory' to the filename). The factory
    function must take no arguments and return an instance of
    pelita.player.SimpleTeam.
    Example implementation:

    def factory():
        return pelita.player.SimpleTeam("My Team", MyPlayer1(), MyPlayer2())

    Example usage:

        $ %(prog)s ~/my_player.py NQRandomPlayer,BasicDefensePlayer

    Example of custom factory function:

        $ %(prog)s ~/my_player.py:my_factory NQRandomPlayer,BasicDefensePlayer

  - Using custom players (package):
    The name of a python package (i.e. a directory with an __init__.py file),
    which exposes a function named 'factory' (see above for more details).
    Example usage:

        $ %(prog)s my_player NQRandomPlayer,BasicDefensePlayer

  - Using custom players (simpleclient):
    The address the server should bind on and wait for a client
    to connect to.

    Example of a server binding the left team to 'tcp://*:9005' and
    the right team to 'ipc:///tmp/mysocket':

        $ %(prog)s tcp://*:9005 ipc:///tmp/mysocket

    Example of a server binding the left team to 'tcp://*:9005' and
    using a built-in Player as the right team:

        $ %(prog)s tcp://*:9005 NQRandomPlayer,BasicDefensePlayer

Standalone mode:
  When --standalone-client is specified, the first positional argument
  is taken as a team specification, whereas the second positional argument
  is used to specify the address where the Player should connect to.

  The user code then runs in the main thread of the process and as such
  may be interrupted with the Python debugger pdb. (For best results,
  it may be necessary to increase (or turn off the timeout time in the server.)

  Example usage. We use a server binding to two different ports:

      $ %(prog)s tcp://*:51025 tcp://*:51027

  Now we can start two clients and have them connect to their respective
  socket:

      $ %(prog)s --standalone-client BFSPlayer,RandomPlayer tcp://localhost:51025
      $ %(prog)s --standalone-client ~/my_player.py tcp://localhost:51027

  A much simpler way, which avoids both the need to specify an available port
  and to manually open up a new process is provided by the --standalone-left and
  --standalone-right arguments. The following line automatically runs
  the left team in standalone mode where it is possible to intercept with
  the Python debugger. (Provided this is included in the code.)

      $ %(prog)s --standalone-left --no-timeout DebuggablePlayer,MyTestPlayer \
                                                BFSPlayer,RandomPlayer

Layout specification:
  If neither --layoutfile nor --layout are specified, the maze is
  chosen at random from the pool of available layouts.
  You can restrict this pool by using --filter.
"""

def run_game():
    args = parser.parse_args()
    if args.help:
        parser.print_help()
        sys.exit(0)
    if args.layout == 'list':
        layouts = pelita.layout.get_available_layouts()
        print '\n'.join(layouts)
        sys.exit(0)
    if args.seed is not None:
        random.seed(args.seed)
    if args.viewer.startswith('tk') and not args.publish_to:
        raise ValueError("Options --tk (or --tk-no-sync) and --no-publish are mutually exclusive.")


    try:
        start_logging(args.log or 'pelita.log')
    except AttributeError:
        # no log specified. so disable logging. Also un-import
        # logging so the clients cannot import logging so easily
        del sys.modules['logging']

    if 'list' in (args.left_team, args.right_team):
        print '\n'.join(PLAYERS)
        sys.exit(0)


    addrs_left, bads, spec_left = prepare_team(args.left_team, args.standalone_left)
    addrs_right, goods, spec_right = prepare_team(args.right_team, args.standalone_right)

    def print_team_info(addr, team, spec, info):
        if team is not None:
            print "Using factory %r -> %r (%s)" % (spec, team.team_name, info)
        elif "://" in addr:
            print "Waiting for %s team on %s" % (info, addr)

    # if standalone_client was specified,
    # we use the following scheme
    # the first positional argument specifies the team to load
    # the second positional argument specifies the address to connect to
    if args.standalone_client:
        addr = addrs_right.replace('*', 'localhost')
        print_team_info(addrs_left, bads, spec_left, "standalone")
        client = pelita.simplesetup.SimpleClient(bads, address=addr)
        client.run()
        sys.exit()
    else:
        print_team_info(addrs_left, bads, spec_left, "left")
        print_team_info(addrs_right, goods, spec_right, "right")


    if args.dry_run:
        sys.exit(0)

    try:
        # TODO: Re-include the dump.
        dump = args.dump or 'pelita.dump'
    except AttributeError:
        dump = None

    if args.viewer == 'tk-no-sync':
        # only use delay when not synced.
        initial_delay = 0.5
    else:
        initial_delay = 0.0

    server = pelita.simplesetup.SimpleServer(layout_file=args.layoutfile,
                                       layout_name=args.layout,
                                       layout_filter=args.filter,
                                       rounds=args.rounds,
                                       bind_addrs=(addrs_left, addrs_right),
                                       initial_delay=initial_delay,
                                       max_timeouts=args.max_timeouts,
                                       timeout_length=args.timeout_length,
                                       seed=args.seed
                                       )

    player_clients = []
    for (addr, team) in zip(server.bind_addresses, [bads, goods]):
        if team:
            addr = addr.replace('*', 'localhost')
            client = pelita.simplesetup.SimpleClient(team, address=addr)
            player_clients.append(client)

    for client in player_clients:
        client.autoplay_process()

    def call_standalone_pelitagame(team_spec, addr):
        """ Starts another process with the same Python executable,
        the same start script (pelitagame) and runs `team_spec`
        as a standalone client on URL `addr`.
        """
        return subprocess.Popen([get_python_process(),
                                 sys.argv[0],
                                 "--standalone-client",
                                 team_spec,
                                 addr])

    if args.standalone_left:
        sub = call_standalone_pelitagame(spec_left, server.bind_addresses[0])
    if args.standalone_right:
        sub = call_standalone_pelitagame(spec_right, server.bind_addresses[1])

    # register the viewers
    if args.publish_to:
        publish_sock = args.publish_to
        subscribe_sock = publish_sock.replace('*', 'localhost')

        publisher = pelita.simplesetup.SimplePublisher(publish_sock)
        server.game_master.register_viewer(publisher)
    else:
        publish_sock = subscribe_sock = None

    if args.viewer == 'ascii':
        server.game_master.register_viewer(pelita.viewer.AsciiViewer())
    if args.viewer == 'null':
        server.game_master.register_viewer(pelita.viewer.DevNullViewer())
    if args.viewer == 'progress':
        server.game_master.register_viewer(pelita.viewer.ProgressViewer())

    open_tk = args.viewer.startswith('tk')

    if open_tk:
        # Something on OS X prevents Tk from running in a forked process.
        # Therefore we cannot use multiprocessing here. subprocess works, though.

        if args.viewer == 'tk':
            sync_address_tk = args.controller.replace('*', 'localhost')
            tk_open = "TkViewer(%r, %r).run()" % (subscribe_sock, sync_address_tk)
        else:
            tk_open = "TkViewer(%r).run()" % subscribe_sock

        tkprocess = subprocess.Popen([get_python_process(),
                                      "-c",
                                      "from pelita.ui.tk_viewer import TkViewer\n" + tk_open])

        if args.viewer == 'tk-no-sync':
            time.sleep(0.5)
    try:
        if args.viewer == 'tk':
            server.register_teams()
            controller = pelita.simplesetup.SimpleController(server.game_master, args.controller)
            controller.run()
            server.exit_teams()
        else:
            server.run()
    except KeyboardInterrupt:
        if open_tk:
            tkprocess.kill()


if __name__ == '__main__':
    run_game()
